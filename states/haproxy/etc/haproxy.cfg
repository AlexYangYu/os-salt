global
        log /dev/log    local0
        log /dev/log    local1 notice
        chroot /var/lib/haproxy
        user haproxy
        group haproxy
        daemon

defaults
        log     global
        mode    http
        option  httplog
        option  dontlognull
        contimeout {{ haproxy.defaults.contimeout }} 
        clitimeout {{ haproxy.defaults.clitimeout }} 
        srvtimeout {{ haproxy.defaults.srvtimeout }} 
        errorfile 400 /etc/haproxy/errors/400.http
        errorfile 403 /etc/haproxy/errors/403.http
        errorfile 408 /etc/haproxy/errors/408.http
        errorfile 500 /etc/haproxy/errors/500.http
        errorfile 502 /etc/haproxy/errors/502.http
        errorfile 503 /etc/haproxy/errors/503.http
        errorfile 504 /etc/haproxy/errors/504.http

{% if haproxy.web.enabled == True %}
listen webinterface
        bind 0.0.0.0:{{ haproxy.web.port }}
        mode http
        stats enable
        stats uri /
        stats realm Strictly\ Private
        stats auth {{ haproxy.web.user }}:{{ haproxy.web.pass }}
{% endif %}

{% if 'mariadb_cluster' in pillar['ha_cluster'].keys() %}
{% set mdb_server_if = pillar['mariadb']['server']['bind_interface'] %}
{% set mdb_server_port = pillar['mariadb']['server']['port'] %}
listen mariadb-cluster
        bind 0.0.0.0:{{ ha_cluster.mariadb_cluster.bind_port }}
        mode tcp
        option tcplog
        option mysql-check user {{ ha_cluster.mariadb_cluster.check_user }}
        balance roundrobin
        {% for server, grains in salt['mine.get']('roles:mysql-cluster', 'grains.items', 'grain').items() %}
        server {{ server }} {{ grains.ip_interfaces[mdb_server_if][0] }}:{{ mdb_server_port }} check
        {% endfor %}
{% endif %}

{% if 'keystone' in pillar['ha_cluster'].keys() %}
{% set key_public_bind_port = pillar['ha_cluster']['keystone']['public_bind_port'] %}
{% set key_server_public_port = pillar['keystone']['default']['public_port'] %}
{% set key_server_public_if = pillar['keystone']['default']['public_interface'] %}
listen keystone_public:
        bind 0.0.0.0:{{ key_public_bind_port }}
        balance source
        option tcpka
        option tcplog
        option httpchk
        {% for server, grains in salt['mine.get']('roles:keystone-api', 'grains.items', 'grain').items() %}
        server {{ server }} {{ grains.ip_interfaces[key_server_public_if][0] }}:{{ key_server_public_port }} check inter 2000 rise 2 fall 5
        {% endfor %}
{% endif %}

{% if 'keystone' in pillar['ha_cluster'].keys() %}
{% set key_admin_bind_port = pillar['ha_cluster']['keystone']['admin_bind_port'] %}
{% set key_server_admin_port = pillar['keystone']['default']['admin_port'] %}
{% set key_server_admin_if = pillar['keystone']['default']['admin_interface'] %}
listen keystone_admin:
        bind 0.0.0.0:{{ key_admin_bind_port }}
        balance source
        option tcpka
        option tcplog
        option httpchk
        {% for server, grains in salt['mine.get']('roles:keystone-api', 'grains.items', 'grain').items() %}
        server {{ server }} {{ grains.ip_interfaces[key_server_admin_if][0] }}:{{ key_server_admin_port }} check inter 2000 rise 2 fall 5
        {% endfor %}
{% endif %}
