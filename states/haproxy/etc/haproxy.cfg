global
        chroot /var/lib/haproxy
        user haproxy
        group haproxy
        daemon
        maxconn {{ haproxy.global.maxconn }}
defaults
        log     global
        maxconn {{ haproxy.defaults.maxconn }}
        option redispatch
        retries {{ haproxy.defaults.retries }}
        timeout http-request {{ haproxy.defaults.http_timeout }}
        timeout queue {{ haproxy.defaults.queue_timeout }}
        timeout connect {{ haproxy.defaults.connect_timeout }} 
        timeout client {{ haproxy.defaults.client_timeout }} 
        timeout server {{ haproxy.defaults.server_timeout }} 
        timeout check {{ haproxy.defaults.server_timeout }} 
        errorfile 400 /etc/haproxy/errors/400.http
        errorfile 403 /etc/haproxy/errors/403.http
        errorfile 408 /etc/haproxy/errors/408.http
        errorfile 500 /etc/haproxy/errors/500.http
        errorfile 502 /etc/haproxy/errors/502.http
        errorfile 503 /etc/haproxy/errors/503.http
        errorfile 504 /etc/haproxy/errors/504.http

{% if haproxy.web.enabled == True %}
listen webinterface
        bind 0.0.0.0:{{ haproxy.web.port }}
        mode http
        stats enable
        stats uri /
        stats realm Strictly\ Private
        stats auth {{ haproxy.web.user }}:{{ haproxy.web.pass }}
{% endif %}

{% if 'mariadb_cluster' in pillar['ha_cluster'].keys() %}
{% set mdb_server_if = pillar['mariadb']['server']['bind_interface'] %}
{% set mdb_server_port = pillar['mariadb']['server']['port'] %}
listen mariadb-cluster
        bind 0.0.0.0:{{ ha_cluster.mariadb_cluster.bind_port }}
        mode tcp
        option httpchk
        #option tcplog
        #option mysql-check user {{ ha_cluster.mariadb_cluster.check_user }}
        balance {{ ha_cluster.mariadb_cluster.balance }}
        {% for server, grains in salt['mine.get']('roles:mysql-cluster', 'grains.items', 'grain').items() %}
        {% if 'mysql-cluster-donor' in grains.roles %} 
        server {{ server }} {{ grains.ip_interfaces[mdb_server_if][0] }}:{{ mdb_server_port }} check port 9200 inter 12000 rise 3 fall 3
        {% else %}
        server {{ server }} {{ grains.ip_interfaces[mdb_server_if][0] }}:{{ mdb_server_port }} check port 9200 inter 12000 rise 3 fall 3 backup
        {% endif %}
        {% endfor %}
{% endif %}

{% if 'keystone' in pillar['ha_cluster'].keys() %}
{% set key_public_bind_port = pillar['ha_cluster']['keystone']['public_bind_port'] %}
{% set key_server_public_port = pillar['keystone']['default']['public_port'] %}
{% set key_server_public_if = pillar['keystone']['default']['public_interface'] %}
listen keystone-public:
        bind 0.0.0.0:{{ key_public_bind_port }}
        balance {{ ha_cluster.keystone.balance }}
        option tcpka
        option tcplog
        option httpchk
        {% for server, grains in salt['mine.get']('roles:keystone-api', 'grains.items', 'grain').items() %}
        server {{ server }} {{ grains.ip_interfaces[key_server_public_if][0] }}:{{ key_server_public_port }} check inter 2000 rise 2 fall 5
        {% endfor %}

{% set key_admin_bind_port = pillar['ha_cluster']['keystone']['admin_bind_port'] %}
{% set key_server_admin_port = pillar['keystone']['default']['admin_port'] %}
{% set key_server_admin_if = pillar['keystone']['default']['admin_interface'] %}
listen keystone-admin:
        bind 0.0.0.0:{{ key_admin_bind_port }}
        balance {{ ha_cluster.keystone.balance }} 
        option tcpka
        option tcplog
        option httpchk
        {% for server, grains in salt['mine.get']('roles:keystone-api', 'grains.items', 'grain').items() %}
        server {{ server }} {{ grains.ip_interfaces[key_server_admin_if][0] }}:{{ key_server_admin_port }} check inter 2000 rise 2 fall 5
        {% endfor %}
{% endif %}

{% if 'glance_api' in pillar['ha_cluster'].keys() %}
{% set glance_api_public_bind_port = pillar['ha_cluster']['glance_api']['bind_port'] %}
{% set glance_api_bind_if = pillar['glance']['default']['bind_interface'] %}
{% set glance_api_bind_port = pillar['glance']['default']['api_bind_port'] %}
listen glance-api:
        bind 0.0.0.0:{{ glance_api_public_bind_port }}
        balance {{ ha_cluster.glance_api.balance }} 
        option tcpka
        option tcplog
        option httpchk
        {% for server, grains in salt['mine.get']('roles:glance-api', 'grains.items', 'grain').items() %}
        server {{ server }} {{ grains.ip_interfaces[glance_api_bind_if][0] }}:{{ glance_api_bind_port }} check inter 2000 rise 2 fall 5
        {% endfor %}
{% endif %}

{% if 'glance_registry' in pillar['ha_cluster'].keys() %}
{% set glance_registry_public_bind_port = pillar['ha_cluster']['glance_registry']['bind_port'] %}
{% set glance_registry_bind_if = pillar['glance']['default']['bind_interface'] %}
{% set glance_registry_bind_port = pillar['glance']['default']['registry_bind_port'] %}
listen glance-registry:
        bind 0.0.0.0:{{ glance_registry_public_bind_port }}
        balance {{ ha_cluster.glance_registry.balance }}
        option tcpka
        option tcplog
        option httpchk
        {% for server, grains in salt['mine.get']('roles:glance-api', 'grains.items', 'grain').items() %}
        server {{ server }} {{ grains.ip_interfaces[glance_registry_bind_if][0] }}:{{ glance_registry_bind_port }} check inter 2000 rise 2 fall 5
        {% endfor %}
{% endif %}

{% if 'cinder_api' in pillar['ha_cluster'].keys() %}
{% set cinder_api_public_bind_port = pillar['ha_cluster']['cinder_api']['bind_port'] %}
{% set cinder_api_bind_if = pillar['cinder']['default']['bind_interface'] %}
{% set cinder_api_bind_port = pillar['cinder']['default']['api_bind_port'] %}
listen cinder-api:
        bind 0.0.0.0:{{ cinder_api_public_bind_port }}
        balance {{ ha_cluster.cinder_api.balance }} 
        option tcpka
        option tcplog
        option httpchk
        {% for server, grains in salt['mine.get']('roles:cinder-api', 'grains.items', 'grain').items() %}
        server {{ server }} {{ grains.ip_interfaces[cinder_api_bind_if][0] }}:{{ cinder_api_bind_port }} check inter 2000 rise 2 fall 5
        {% endfor %}
{% endif %}
