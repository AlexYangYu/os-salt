[DEFAULT]
verbose={{ nova.default.verbose }}
debug={{ nova.default.debug }}
use_syslog=false
logdir=/var/log/nova
state_path=/var/lib/nova
lock_path=/var/lock/nova
volumes_path=/var/lib/nova/volumes
root_helper=sudo nova-rootwrap /etc/nova/rootwrap.conf
rootwrap_config=/etc/nova/rootwrap.conf
report_interval=10
notification_driver=messaging
vif_plugging_timeout=300
vif_plugging_is_fatal=true
instance_usage_audit_period=hour
instance_usage_audit=true
service_down_time=60
start_guests_on_host_boot=true
notify_on_state_change=vm_and_task_state
resume_guests_state_on_host_boot={{ nova.default.resume_guests_state_on_host_boot }}
vcpu_pin_set={{ nova.default.vcpu_pin_set }}
cpu_allocation_ratio={{ nova.default.cpu_allocation_ratio }}
ram_allocation_ratio={{ nova.default.ram_allocation_ratio }}
reserved_host_memory_mb={{ nova.default.reserved_host_memory_mb }}
reserved_host_disk_mb={{ nova.default.reserved_host_disk_mb }}

# COMPUTE API
api_paste_config=/etc/nova/api-paste.ini
enabled_apis=ec2,osapi_compute,metadata
network_api_class=nova.network.neutronv2.api.API
osapi_compute_listen=0.0.0.0
osapi_compute_listen_port={{ nova.default.nova_api_port }}
osapi_volume_listen=0.0.0.0
metadata_listen=0.0.0.0
metadata_listen_port={{ nova.default.meta_api_port }}
osapi_compute_workers={{ nova.default.api_workers }}

# EC2 API
ec2_listen=0.0.0.0
ec2_listen_port={{ nova.default.ec2_api_port }}
ec2_private_dns_show_ip=True
keystone_ec2_url={{ endpoints.keystone.public.protocol }}://{{ endpoints.keystone.public.host }}:{{ endpoints.keystone.public.port }}/{{ endpoints.keystone.public.version }}/ec2tokens

# RABBIT
{% set rabbits = [] %}
{% for server, grains in salt['mine.get']('roles:rabbitmq-ram', 'grains.items', 'grain').items() %}
#{{ rabbits.append('%s:%s' % (server, pillar['rabbitmq']['server']['bind_port'])) }}
{% endfor %}
rabbit_hosts={{ ','.join(rabbits) }}
rabbit_userid={{ pillar['rabbitmq']['server']['default_user'] }}
rabbit_password={{ pillar['rabbitmq']['server']['default_pass'] }}
rabbit_virtual_host={{ pillar['rabbitmq']['server']['default_vhost'] }}
rabbit_ha_queues=True
rpc_backend=nova.rpc.impl_kombu
kombu_reconnect_delay=5.0

# DHCP
dhcpbridge_flagfile=/etc/nova/nova.conf
dhcpbridge=/usr/bin/nova-dhcpbridge
force_dhcp_release=True

# NETWORK
firewall_driver={{ nova.default.firewall_driver }}
security_group_api=neutron
neutron_extension_sync_interval=600
neutron_url_timeout=30
neutron_ovs_bridge=br-int
neutron_default_tenant_id=default
neutron_region_name={{ endpoints.region }}
neutron_metadata_proxy_shared_secret={{ nova.neutron.metadata_proxy_shared_secret }}
neutron_admin_auth_url={{ endpoints.keystone.admin.protocol }}://{{ endpoints.keystone.admin.host }}:{{ endpoints.keystone.admin.port }}/{{ endpoints.keystone.admin.version }}
neutron_url={{ endpoints.neutron.admin.protocol }}://{{ endpoints.neutron.admin.host }}:{{ endpoints.neutron.admin.port }}
neutron_auth_strategy=keystone
neutron_admin_tenant_name={{ data.service.tenant }}
neutron_admin_username={{ data.neutron_user.name }}
neutron_admin_password={{ data.neutron_user.passwd }}
service_neutron_metadata_proxy=true
linuxnet_interface_driver={{ nova.default.linuxnet_interface_driver }}


# LIBVIRT
use_cow_images=true
libvirt_use_virtio_for_bridges=True

# SCHEDULER
cpu_allocation_ratio=8.0
ram_allocation_ratio=1.0
ram_weight_multiplier=1.0
disk_allocation_ratio=1.0
max_io_ops_per_host=8
max_instances_per_host=50
scheduler_max_attempts=3
scheduler_default_filters=DifferentHostFilter,RetryFilter,AvailabilityZoneFilter,RamFilter,CoreFilter,DiskFilter,ComputeFilter,ComputeCapabilitiesFilter,ImagePropertiesFilter
scheduler_host_manager=nova.scheduler.host_manager.HostManager
scheduler_host_subset_size=30
scheduler_weight_classes=nova.scheduler.weights.all_weighers
compute_scheduler_driver=nova.scheduler.filter_scheduler.FilterScheduler
scheduler_available_filters=nova.scheduler.filters.all_filters

# QUOTA
quota_driver=nova.quota.DbQuotaDriver
quota_cores=100
quota_volumes=100
quota_floating_ips=100
quota_gigabytes=1000
quota_instances=100
quota_metadata_items=1024
quota_max_injected_file_content_bytes=102400
quota_max_injected_files=50
quota_max_injected_file_path_bytes=4096

# GLANCE
image_service=nova.image.glance.GlanceImageService
glance_api_servers={{ endpoints.glance_api.public.host }}:{{ endpoints.glance_api.public.port }}

# VNC
vnc_enabled={{ nova.vnc.enabled }}
novncproxy_base_url=http://{{ endpoints.novnc.host }}:{{ endpoints.novnc.port }}/vnc_auto.html
novncproxy_host={{ nova.vnc.novncproxy_host }}
novncproxy_port={{ nova.vnc.novncproxy_port }}
vncserver_listen={{ nova.vnc.vncserver_listen }}
vncserver_proxyclient_address={{ salt['grains.get']('ip_interfaces:em2')[0] }}


iscsi_helper=tgtadm
connection_type=libvirt

# VOLUME
volume_api_class=nova.volume.cinder.API

# POLICY
allow_resize_to_same_host=True

# AUTH
auth_strategy=keystone

[keystone_authtoken]
auth_protocol={{ endpoints.keystone.admin.protocol }}
auth_host={{ endpoints.keystone.admin.host }}
auth_port={{ endpoints.keystone.admin.port }}
admin_tenant_name={{ data.service.tenant }}
admin_user={{ data.nova_user.name }}
admin_password={{ data.nova_user.passwd }}
signing_dirname=/tmp/keystone-signing-nova
signing_dir=/tmp/keystone-signing-nova

[DATABASE]
connection=mysql://{{ nova.database.mysql_user }}:{{ nova.database.mysql_pass }}@{{ mysql_host }}:{{ mysql_port }}/{{ nova.database.mysql_db }}?charset=utf8
idle_timeout={{ nova.database.idle_timeout }}
max_pool_size={{ nova.database.max_pool_size }}
max_retries={{ nova.database.max_retries }}
max_overflow={{ nova.database.max_overflow }}
idle_timeout={{ nova.database.idle_timeout }}

[libvirt]
virt_type={{ nova.compute.libvirt.virt_type }}
disk_cachemodes="{{ nova.compute.libvirt.disk_cachemodes }}"
images_type={{ nova.compute.libvirt.images_type }}
images_rbd_pool={{ nova.rbd_store.pool }}
images_rbd_ceph_conf={{ nova.rbd_store.conf }}
rbd_user={{ nova.rbd_store.user }}
rbd_secret_uuid={{ pillar['cinder']['rbd_store']['secert_uuid'] }}
inject_key={{ nova.compute.libvirt.inject_key }}
inject_password={{ nova.compute.libvirt.inject_password }}
inject_partition={{ nova.compute.libvirt.inject_partition }}
live_migration_flag="{{ nova.compute.libvirt.live_migration_flag }}"
